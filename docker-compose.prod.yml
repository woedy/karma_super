version: '3.8'

services:
  backend:
    build:
      context: ./karma_backend
      dockerfile: Dockerfile.prod
    container_name: karma_backend_prod
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000 --workers 3 --threads 2
    volumes:
      - ./karma_backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
# No ports needed - Coolify will automatically assign available ports
# and make services accessible through reverse proxy
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-False}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-*}
    depends_on:
      - redis
    restart: unless-stopped

  frontend:
    build:
      context: ./logix_frontend
      dockerfile: Dockerfile.prod
    container_name: karma_frontend_prod
# No command needed - Dockerfile handles the build and nginx startup
    volumes:
      - ./logix_frontend:/app
      - /app/node_modules
# No ports needed - Coolify will automatically assign available ports
# and make services accessible through reverse proxy
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${VITE_API_URL}
    depends_on:
      - backend
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: karma_redis_prod
# No ports needed - Redis is only used internally by other services
    volumes:
      - redis_data:/data
    restart: unless-stopped

  celery:
    build:
      context: ./karma_backend
      dockerfile: Dockerfile.prod
    container_name: karma_celery_prod
    command: celery -A core worker --loglevel=info --concurrency=2
    volumes:
      - ./karma_backend:/app
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG:-False}
    depends_on:
      - redis
      - backend
    restart: unless-stopped

volumes:
  redis_data:
  static_volume:
  media_volume:
